name: bridgestan tests

on:
  push:
    branches:
      - 'main'
  pull_request:
  workflow_dispatch: {}

env:
  CMDSTAN_VERSION: "2.31.0"
  CACHE_VERSION: 0

jobs:
  build_test_models:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out github
        uses: actions/checkout@v3

      - name: CmdStan installation cacheing
        uses: actions/cache@v3
        id: cmdstan-cache
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Install CmdStan (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          pipx run --spec cmdstanpy install_cmdstan --version "${{ env.CMDSTAN_VERSION }}" --cores 2 --verbose

      - name: Install CmdStan (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pipx run --spec cmdstanpy install_cmdstan --version "${{ env.CMDSTAN_VERSION }}" --cores 2 --verbose --compiler

      - name: Build C example (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          export CMDSTAN=~/.cmdstan/cmdstan-${{ env.CMDSTAN_VERSION }}/
          cd c-example/
          make example
          make example_static
          rm ../src/bridgestan.o
          rm ../test_models/full/full_model.a

          ./example
          ./example_static
        shell: bash

      # we use the cache here to build the Stan models once for multiple interfaces
      - name: Set up test model cache
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}-v${{ env.CACHE_VERSION }}

      - name: Build test models (Unix)
        if: matrix.os != 'windows-latest' && steps.test-models.outputs.cache-hit != 'true'
        run: |
          export CMDSTAN=~/.cmdstan/cmdstan-${{ env.CMDSTAN_VERSION }}/
          make STAN_THREADS=true O=0 test_models -j2
        shell: bash

      - name: Build test models (Windows)
        if: matrix.os == 'windows-latest' && steps.test-models.outputs.cache-hit != 'true'
        run: |
          $raw_cmdstan = "$($HOME)/.cmdstan/cmdstan-${{ env.CMDSTAN_VERSION }}/"
          $env:CMDSTAN = $raw_cmdstan.replace('\', '/')
          mingw32-make.exe STAN_THREADS=true O=0 test_models -j2
        shell: pwsh

  test_python_client:
    needs: [build_test_models]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.9, "3.10"]
      fail-fast: false
    steps:
      - name: Check out github
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore CmdStan
        uses: actions/cache@v3
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Restore built models
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}-v${{ env.CACHE_VERSION }}

      - name: Install package
        run: |
          cd python/
          pip install pytest
          pip install .

      - name: Run tests
        run: |
          export BRIDGESTAN=$(pwd)
          cd python/
          pytest -v

  test_julia_client:
    needs: [build_test_models]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Check out github
        uses: actions/checkout@v3
      - name: Set up Julia
        uses: julia-actions/setup-julia@v1

      - name: Restore CmdStan
        uses: actions/cache@v3
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Restore built models
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}-v${{ env.CACHE_VERSION }}

      - name: Run tests
        run: |
          export BRIDGESTAN=$(pwd)
          julia --project=./julia -t 2 -e "using Pkg; Pkg.test()"

  test_R_client:
    needs: [build_test_models]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Check out github
        uses: actions/checkout@v3

      - name: Install R
        uses: r-lib/actions/setup-r@v2.3.1

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2.3.1
        with:
          packages: |
            any::R6
            any::testthat
            any::devtools

      - name: Restore CmdStan
        uses: actions/cache@v3
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Restore built models
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}-v${{ env.CACHE_VERSION }}

      - name: Run tests
        run: |
          cd R/tests/testthat
          gcc -fpic -shared -o test_collisions.so test_collisions.c
          cd ../..
          Rscript -e "devtools::test(reporter = c(\"summary\", \"fail\"))"

  # Seperate for now, weird dynamic linking issues need resolving in GHA runner
  test_clients_windows:
    needs: [build_test_models]
    runs-on: windows-latest
    steps:
      - name: Check out github
        uses: actions/checkout@v3

      - name: Restore CmdStan
        uses: actions/cache@v3
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Setup TBB
        run: |
          cd ~/.cmdstan/cmdstan-${{ env.CMDSTAN_VERSION }}
          Add-Content $env:GITHUB_PATH "$(pwd)/stan/lib/stan_math/lib/tbb"

      - name: Restore built models
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-windows-latest-cmdstan-${{ env.CMDSTAN_VERSION }}-v${{ env.CACHE_VERSION }}

      - name: Install R
        uses: r-lib/actions/setup-r@v2.3.1

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2.3.1
        with:
          packages: |
            any::R6
            any::testthat
            any::devtools

      - name: Set up Julia
        uses: julia-actions/setup-julia@v1

      - name: Run Julia tests
        run: |
          $env:BRIDGESTAN = $(pwd)
          julia --project=./julia -t 2 -e "using Pkg; Pkg.test()"

      - name: Run R tests
        run: |
          cd R/tests/testthat
          gcc -fpic -shared -o test_collisions.dll test_collisions.c
          cd ../..
          Rscript -e 'devtools::test(reporter = c(\"summary\", \"fail\"))'
